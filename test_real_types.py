#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–∏–ø–∞–º–∏
"""

import sqlite3
import tempfile
import os

def create_test_table():
    """–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É –∫–∞–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ë–î
    temp_db = tempfile.mktemp(suffix='.db')
    conn = sqlite3.connect(temp_db)
    cursor = conn.cursor()
    
    try:
        # SQL –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–Ω–∞ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –ø–æ–ª—è TEXT
        sql1 = '''CREATE TABLE "test1" (
            "id" INTEGER PRIMARY KEY AUTOINCREMENT,
            "name" TEXT NOT NULL,
            "description" TEXT
        )'''
        
        print("1Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –ø–æ–ª—è–º–∏ TEXT:")
        print(f"SQL: {sql1}")
        
        cursor.execute(sql1)
        conn.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        cursor.execute('PRAGMA table_info("test1")')
        columns = cursor.fetchall()
        
        print("üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã:")
        for col in columns:
            cid, name, col_type, notnull, default, pk = col
            print(f"   –ü–æ–ª–µ '{name}': —Ç–∏–ø '{col_type}', NOT NULL: {bool(notnull)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–æ–ª—è
            if name == 'name':
                if col_type != 'TEXT':
                    print(f"   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ø–æ–ª–µ 'name' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å TEXT, –∞ —Å—Ç–∞–ª–æ {col_type}")
                else:
                    print(f"   ‚úÖ –ü–æ–ª–µ 'name' –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {col_type}")
            
            if name == 'description':
                if col_type != 'TEXT':
                    print(f"   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ø–æ–ª–µ 'description' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å TEXT, –∞ —Å—Ç–∞–ª–æ {col_type}")
                else:
                    print(f"   ‚úÖ –ü–æ–ª–µ 'description' –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {col_type}")
        
        # –¢–µ—Å—Ç 2: –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
        print(f"\n2Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–æ –≤—Å–µ–º–∏ —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö:")
        
        sql2 = '''CREATE TABLE "test2" (
            "id" INTEGER PRIMARY KEY AUTOINCREMENT,
            "text_field" TEXT,
            "int_field" INTEGER,
            "real_field" REAL,
            "blob_field" BLOB,
            "numeric_field" NUMERIC
        )'''
        
        print(f"SQL: {sql2}")
        cursor.execute(sql2)
        conn.commit()
        
        cursor.execute('PRAGMA table_info("test2")')
        columns = cursor.fetchall()
        
        print("üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã —Å–æ –≤—Å–µ–º–∏ —Ç–∏–ø–∞–º–∏:")
        expected_types = {
            'text_field': 'TEXT',
            'int_field': 'INTEGER', 
            'real_field': 'REAL',
            'blob_field': 'BLOB',
            'numeric_field': 'NUMERIC'
        }
        
        for col in columns:
            cid, name, col_type, notnull, default, pk = col
            if name in expected_types:
                expected = expected_types[name]
                if col_type == expected:
                    print(f"   ‚úÖ {name}: {col_type} (–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ)")
                else:
                    print(f"   ‚ùå {name}: –æ–∂–∏–¥–∞–ª—Å—è {expected}, –ø–æ–ª—É—á–µ–Ω {col_type}")
            else:
                print(f"   üìù {name}: {col_type}")
        
        print(f"\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É —Å –¥–∞–Ω–Ω—ã–º–∏:")
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        cursor.execute('''INSERT INTO test1 (name, description) VALUES (?, ?)''',
                      ('–¢–µ—Å—Ç–æ–≤–æ–µ –∏–º—è', '–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ'))
        
        cursor.execute('''INSERT INTO test2 (text_field, int_field, real_field) VALUES (?, ?, ?)''',
                      ('–¢–µ–∫—Å—Ç', 42, 3.14))
        
        conn.commit()
        
        # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        cursor.execute('SELECT * FROM test1')
        row1 = cursor.fetchone()
        print(f"   –î–∞–Ω–Ω—ã–µ –∏–∑ test1: {row1}")
        print(f"   –¢–∏–ø –ø–æ–ª—è name: {type(row1[1])}")
        print(f"   –¢–∏–ø –ø–æ–ª—è description: {type(row1[2])}")
        
        cursor.execute('SELECT * FROM test2')
        row2 = cursor.fetchone()
        print(f"   –î–∞–Ω–Ω—ã–µ –∏–∑ test2: {row2}")
        if row2:
            print(f"   text_field: {row2[1]} (—Ç–∏–ø: {type(row2[1])})")
            print(f"   int_field: {row2[2]} (—Ç–∏–ø: {type(row2[2])})")
            print(f"   real_field: {row2[3]} (—Ç–∏–ø: {type(row2[3])})")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return False
        
    finally:
        conn.close()
        try:
            os.remove(temp_db)
        except:
            pass

if __name__ == "__main__":
    print("=" * 60)
    print("üî¨ –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø –¢–ê–ë–õ–ò–¶ –° –†–ê–ó–ù–´–ú–ò –¢–ò–ü–ê–ú–ò –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    success = create_test_table()
    
    print("\n" + "=" * 60)
    if success:
        print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        print("üí° –ï—Å–ª–∏ –≤—Å–µ —Ç–∏–ø—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –ø—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤:")
        print("   - –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ")  
        print("   - –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        print("   - –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
    else:
        print("‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω - –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
    
    print("=" * 60)
    input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")