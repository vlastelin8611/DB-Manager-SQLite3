#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ SQLite Database Manager
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã
"""

import os
import sys
import sqlite3
import tempfile
import shutil
from datetime import datetime

def create_test_db():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–æ–∫"""
    test_dir = tempfile.mkdtemp()
    db_path = os.path.join(test_dir, "test_database.db")
    
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É —Å–æ –≤—Å–µ–º–∏ —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("""
    CREATE TABLE test_types (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        text_field TEXT NOT NULL,
        integer_field INTEGER,
        real_field REAL,
        blob_field BLOB,
        numeric_field NUMERIC,
        date_field TEXT,
        nullable_field TEXT
    )
    """)
    
    # –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    cursor.execute("""
    INSERT INTO test_types 
    (text_field, integer_field, real_field, numeric_field, date_field, nullable_field)
    VALUES 
    ('–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç', 42, 3.14159, 12345.67, '2023-01-15', '–ù–µ NULL'),
    ('–†—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç', 100, 2.71828, 999.99, '2023-02-20', NULL),
    ('English text', -15, -1.5, 0, '2023-03-10', 'Another value')
    """)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å —Å–æ—Å—Ç–∞–≤–Ω—ã–º –∫–ª—é—á–æ–º
    cursor.execute("""
    CREATE TABLE composite_key (
        part1 INTEGER,
        part2 TEXT,
        value TEXT,
        PRIMARY KEY (part1, part2)
    )
    """)
    
    cursor.execute("""
    INSERT INTO composite_key (part1, part2, value) VALUES
    (1, 'A', '–ó–Ω–∞—á–µ–Ω–∏–µ 1A'),
    (1, 'B', '–ó–Ω–∞—á–µ–Ω–∏–µ 1B'),
    (2, 'A', '–ó–Ω–∞—á–µ–Ω–∏–µ 2A')
    """)
    
    conn.commit()
    conn.close()
    
    return db_path

def test_database_operations():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ë–î...")
    
    test_db = create_test_db()
    
    try:
        # –¢–µ—Å—Ç 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        conn = sqlite3.connect(test_db)
        cursor = conn.cursor()
        
        # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = cursor.fetchall()
        expected_tables = ['test_types', 'composite_key']
        
        found_tables = [t[0] for t in tables]
        for table in expected_tables:
            if table in found_tables:
                print(f"   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ '{table}' –Ω–∞–π–¥–µ–Ω–∞")
            else:
                print(f"   ‚ùå –¢–∞–±–ª–∏—Ü–∞ '{table}' –ù–ï –Ω–∞–π–¥–µ–Ω–∞")
        
        # –¢–µ—Å—Ç 3: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("PRAGMA table_info(test_types)")
        columns = cursor.fetchall()
        
        expected_columns = {
            'id': 'INTEGER',
            'text_field': 'TEXT', 
            'integer_field': 'INTEGER',
            'real_field': 'REAL',
            'blob_field': 'BLOB',
            'numeric_field': 'NUMERIC',
            'date_field': 'TEXT',
            'nullable_field': 'TEXT'
        }
        
        for col in columns:
            col_name = col[1]
            col_type = col[2]
            if col_name in expected_columns:
                if expected_columns[col_name] == col_type:
                    print(f"   ‚úÖ –ü–æ–ª–µ '{col_name}' ({col_type}) –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                else:
                    print(f"   ‚ùå –ü–æ–ª–µ '{col_name}' –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø: {col_type}, –æ–∂–∏–¥–∞–ª—Å—è {expected_columns[col_name]}")
            else:
                print(f"   ‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –ø–æ–ª–µ: {col_name}")
        
        # –¢–µ—Å—Ç 4: –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("SELECT COUNT(*) FROM test_types")
        count = cursor.fetchone()[0]
        if count == 3:
            print(f"   ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {count}")
        else:
            print(f"   ‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {count}, –æ–∂–∏–¥–∞–ª–æ—Å—å 3")
        
        # –¢–µ—Å—Ç 5: –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("SELECT * FROM test_types LIMIT 1")
        row = cursor.fetchone()
        
        if isinstance(row[1], str):  # text_field
            print("   ‚úÖ TEXT –ø–æ–ª–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print(f"   ‚ùå TEXT –ø–æ–ª–µ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø: {type(row[1])}")
            
        if isinstance(row[2], int):  # integer_field  
            print("   ‚úÖ INTEGER –ø–æ–ª–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print(f"   ‚ùå INTEGER –ø–æ–ª–µ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø: {type(row[2])}")
            
        if isinstance(row[3], float):  # real_field
            print("   ‚úÖ REAL –ø–æ–ª–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ") 
        else:
            print(f"   ‚ùå REAL –ø–æ–ª–µ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø: {type(row[3])}")
        
        conn.close()
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
        return False
    finally:
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
        try:
            os.remove(test_db)
            os.rmdir(os.path.dirname(test_db))
        except:
            pass

def test_sql_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é SQL –∑–∞–ø—Ä–æ—Å–æ–≤"""
    print("\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SQL...")
    
    test_cases = [
        {
            'name': 'simple_table',
            'fields': [
                ('id', 'INTEGER', False, '', True),
                ('name', 'TEXT', False, '', False),
                ('age', 'INTEGER', True, '18', False)
            ],
            'expected_sql': "CREATE TABLE simple_table (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT NOT NULL, age INTEGER DEFAULT 18)"
        },
        {
            'name': 'complex_table', 
            'fields': [
                ('uuid', 'TEXT', False, '', True),
                ('description', 'TEXT', True, 'NULL', False),
                ('price', 'REAL', False, '0.0', False),
                ('data', 'BLOB', True, '', False)
            ],
            'expected_sql': "CREATE TABLE complex_table (uuid TEXT PRIMARY KEY, description TEXT DEFAULT NULL, price REAL NOT NULL DEFAULT 0.0, data BLOB)"
        }
    ]
    
    for case in test_cases:
        print(f"\n   –¢–µ—Å—Ç —Ç–∞–±–ª–∏—Ü—ã '{case['name']}':")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SQL –∫–∞–∫ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ
        fields = []
        for field_name, field_type, allow_null, default, is_pk in case['fields']:
            field_def = f"{field_name} {field_type}"
            
            if is_pk:
                field_def += " PRIMARY KEY"
                if field_type.upper() == 'INTEGER':
                    field_def += " AUTOINCREMENT"
            
            if not allow_null and not is_pk:
                field_def += " NOT NULL"
                
            if default and default.strip():
                field_def += f" DEFAULT {default}"
                
            fields.append(field_def)
        
        generated_sql = f"CREATE TABLE {case['name']} ({', '.join(fields)})"
        
        print(f"   –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SQL: {generated_sql}")
        print(f"   –û–∂–∏–¥–∞–µ–º—ã–π SQL:      {case['expected_sql']}")
        
        if generated_sql == case['expected_sql']:
            print("   ‚úÖ SQL –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        else:
            print("   ‚ùå SQL –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–≤–µ—Ä–Ω–∞")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å SQL
        try:
            conn = sqlite3.connect(':memory:')
            cursor = conn.cursor()
            cursor.execute(generated_sql)
            conn.close()
            print("   ‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SQL –≤–∞–ª–∏–¥–µ–Ω")
        except Exception as e:
            print(f"   ‚ùå –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SQL –Ω–µ–≤–∞–ª–∏–¥–µ–Ω: {str(e)}")

def test_gui_components():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç GUI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–µ–∑ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–∫–æ–Ω"""
    print("\nüé® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GUI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
    
    try:
        import tkinter as tk
        from tkinter import ttk
        
        # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä—ã—Ç—ã–π root
        root = tk.Tk()
        root.withdraw()
        
        # –¢–µ—Å—Ç Treeview
        try:
            tree = ttk.Treeview(root, selectmode='browse')
            tree.heading('#0', text='Test')
            tree.insert('', 'end', text='test_item')
            print("   ‚úÖ Treeview —Å–æ–∑–¥–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ Treeview: {str(e)}")
        
        # –¢–µ—Å—Ç Combobox
        try:
            var = tk.StringVar(value="TEXT")
            combo = ttk.Combobox(root, textvariable=var, 
                               values=["TEXT", "INTEGER", "REAL", "BLOB", "NUMERIC"],
                               state="readonly")
            print("   ‚úÖ Combobox —Å–æ–∑–¥–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ Combobox: {str(e)}")
        
        # –¢–µ—Å—Ç Entry
        try:
            var = tk.StringVar()
            entry = ttk.Entry(root, textvariable=var)
            var.set("Test value")
            if var.get() == "Test value":
                print("   ‚úÖ Entry —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print("   ‚ùå Entry –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ Entry: {str(e)}")
        
        # –¢–µ—Å—Ç Checkbutton
        try:
            var = tk.BooleanVar()
            check = ttk.Checkbutton(root, variable=var)
            var.set(True)
            if var.get() == True:
                print("   ‚úÖ Checkbutton —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print("   ‚ùå Checkbutton –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ Checkbutton: {str(e)}")
        
        root.destroy()
        return True
        
    except Exception as e:
        print(f"   ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ GUI: {str(e)}")
        return False

def test_file_operations():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ñ–∞–π–ª–∞–º–∏"""
    print("\nüíæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π...")
    
    test_dir = tempfile.mkdtemp()
    
    try:
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ë–î
        db_path = os.path.join(test_dir, "test_create.db")
        conn = sqlite3.connect(db_path)
        conn.close()
        
        if os.path.exists(db_path):
            print("   ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("   ‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ë–î –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return False
        
        # –¢–µ—Å—Ç –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è (–±—ç–∫–∞–ø)
        backup_path = os.path.join(test_dir, "backup.db")
        shutil.copy2(db_path, backup_path)
        
        if os.path.exists(backup_path):
            print("   ‚úÖ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("   ‚ùå –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ SQL
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        cursor.execute("CREATE TABLE export_test (id INTEGER, name TEXT)")
        cursor.execute("INSERT INTO export_test VALUES (1, 'test')")
        conn.commit()
        
        sql_path = os.path.join(test_dir, "export.sql")
        with open(sql_path, 'w', encoding='utf-8') as f:
            for line in conn.iterdump():
                f.write(f"{line}\n")
        
        conn.close()
        
        if os.path.exists(sql_path) and os.path.getsize(sql_path) > 0:
            print("   ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç SQL —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            with open(sql_path, 'r', encoding='utf-8') as f:
                content = f.read()
                if 'export_test' in content and 'test' in content:
                    print("   ‚úÖ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                else:
                    print("   ‚ö†Ô∏è  –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø–æ–ª–Ω—ã–º")
        else:
            print("   ‚ùå –≠–∫—Å–ø–æ—Ä—Ç SQL –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {str(e)}")
        return False
    finally:
        # –û—á–∏—Å—Ç–∫–∞
        shutil.rmtree(test_dir, ignore_errors=True)

def test_edge_cases():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏"""
    print("\nüö® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤...")
    
    # –¢–µ—Å—Ç —Å —Ä—É—Å—Å–∫–∏–º–∏ –∏–º–µ–Ω–∞–º–∏
    try:
        conn = sqlite3.connect(':memory:')
        cursor = conn.cursor()
        
        cursor.execute("CREATE TABLE —Ä—É—Å—Å–∫–∞—è_—Ç–∞–±–ª–∏—Ü–∞ (–ø–æ–ª–µ_—Ç–µ–∫—Å—Ç TEXT, –ø–æ–ª–µ_—á–∏—Å–ª–æ INTEGER)")
        cursor.execute("INSERT INTO —Ä—É—Å—Å–∫–∞—è_—Ç–∞–±–ª–∏—Ü–∞ VALUES ('—Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç', 42)")
        cursor.execute("SELECT * FROM —Ä—É—Å—Å–∫–∞—è_—Ç–∞–±–ª–∏—Ü–∞")
        result = cursor.fetchone()
        
        if result and result[0] == '—Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç':
            print("   ‚úÖ –†—É—Å—Å–∫–∏–µ –∏–º–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è")
        else:
            print("   ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å —Ä—É—Å—Å–∫–∏–º–∏ –∏–º–µ–Ω–∞–º–∏")
            
        conn.close()
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å —Ä—É—Å—Å–∫–∏–º–∏ –∏–º–µ–Ω–∞–º–∏: {str(e)}")
    
    # –¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    try:
        conn = sqlite3.connect(':memory:')
        cursor = conn.cursor()
        
        cursor.execute("CREATE TABLE null_test (id INTEGER, nullable_field TEXT)")
        cursor.execute("INSERT INTO null_test VALUES (1, NULL)")
        cursor.execute("INSERT INTO null_test VALUES (2, '')")
        cursor.execute("SELECT * FROM null_test")
        results = cursor.fetchall()
        
        if len(results) == 2:
            print("   ‚úÖ NULL –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è")
        else:
            print("   ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å NULL –∑–Ω–∞—á–µ–Ω–∏—è–º–∏")
            
        conn.close()
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å NULL –∑–Ω–∞—á–µ–Ω–∏—è–º–∏: {str(e)}")
    
    # –¢–µ—Å—Ç —Å –±–æ–ª—å—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    try:
        conn = sqlite3.connect(':memory:')
        cursor = conn.cursor()
        
        cursor.execute("CREATE TABLE big_data (id INTEGER, big_text TEXT)")
        big_string = "A" * 10000  # 10KB —Å—Ç—Ä–æ–∫–∞
        cursor.execute("INSERT INTO big_data VALUES (1, ?)", (big_string,))
        cursor.execute("SELECT big_text FROM big_data WHERE id = 1")
        result = cursor.fetchone()
        
        if result and len(result[0]) == 10000:
            print("   ‚úÖ –ë–æ–ª—å—à–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è")
        else:
            print("   ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –±–æ–ª—å—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
            
        conn.close()
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å –±–æ–ª—å—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {str(e)}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("=" * 60)
    print("üß™ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï SQLite Database Manager")
    print("=" * 60)
    print(f"–î–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("-" * 60)
    
    results = {}
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    results['database'] = test_database_operations()
    results['sql_generation'] = test_sql_generation()
    results['gui'] = test_gui_components()
    results['files'] = test_file_operations()
    test_edge_cases()
    
    # –ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    passed = sum(results.values())
    total = len(results)
    
    for test_name, result in results.items():
        icon = "‚úÖ" if result else "‚ùå"
        print(f"{icon} {test_name}: {'–ü–†–û–ô–î–ï–ù' if result else '–ü–†–û–í–ê–õ–ï–ù'}")
    
    print(f"\n–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        return 0
    else:
        print("‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        return 1

if __name__ == "__main__":
    try:
        exit_code = main()
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\n\nüëã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {str(e)}")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
        sys.exit(1)