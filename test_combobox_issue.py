#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
"""

import tkinter as tk
from tkinter import ttk

def test_combobox_issue():
    """–¢–µ—Å—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å Combobox —Ç–∏–ø–æ–≤"""
    
    print("üîç –¢–ï–°–¢ –ü–†–û–ë–õ–ï–ú–´ –° –¢–ò–ü–ê–ú–ò –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ
    root = tk.Tk()
    root.withdraw()  # –°–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º Combobox –∫–∞–∫ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ
    type_var = tk.StringVar(value="TEXT")
    type_combo = ttk.Combobox(root, textvariable=type_var,
                             values=["TEXT", "INTEGER", "REAL", "BLOB", "NUMERIC"],
                             state="readonly")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    test_cases = ["TEXT", "INTEGER", "REAL", "BLOB", "NUMERIC"]
    
    print("–¢–µ—Å—Ç–∏—Ä—É–µ–º Combobox:")
    for test_value in test_cases:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
        type_var.set(test_value)
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
        retrieved = type_var.get()
        
        print(f"   –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: '{test_value}' -> –ü–æ–ª—É—á–µ–Ω–æ: '{retrieved}'")
        print(f"   –¢–∏–ø—ã: set={type(test_value)} get={type(retrieved)}")
        print(f"   –†–∞–≤–Ω—ã: {test_value == retrieved}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å
        try:
            index = type_combo['values'].index(test_value)
            print(f"   –ò–Ω–¥–µ–∫—Å –≤ —Å–ø–∏—Å–∫–µ: {index}")
        except ValueError:
            print(f"   ‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ!")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º current()
        try:
            type_combo.current(index)
            current_value = type_combo.get()
            print(f"   current() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç: '{current_value}'")
        except:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ current()")
        
        print()
    
    root.destroy()
    
    # –¢–µ–ø–µ—Ä—å —Ç–µ—Å—Ç–∏—Ä—É–µ–º Tree –∫–∞–∫ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ  
    print("–¢–µ—Å—Ç–∏—Ä—É–µ–º TreeView:")
    print("-" * 30)
    
    root = tk.Tk()
    root.withdraw()
    
    tree = ttk.Treeview(root, columns=('type', 'null', 'default', 'pk'))
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
    test_fields = [
        ('field1', 'TEXT'),
        ('field2', 'INTEGER'),
        ('field3', 'REAL'),
        ('field4', 'BLOB'),
        ('field5', 'NUMERIC')
    ]
    
    for field_name, field_type in test_fields:
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –¥–µ—Ä–µ–≤–æ
        item_id = tree.insert('', 'end', text=field_name, 
                             values=(field_type, 'YES', '', 'NO'))
        
        # –ß–∏—Ç–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        item_values = tree.item(item_id)['values']
        retrieved_type = item_values[0]
        
        print(f"   {field_name}: –∑–∞–ø–∏—Å–∞–Ω '{field_type}' -> –ø—Ä–æ—á–∏—Ç–∞–Ω '{retrieved_type}'")
        print(f"   –¢–∏–ø—ã: –∑–∞–ø–∏—Å–∞–Ω={type(field_type)} –ø—Ä–æ—á–∏—Ç–∞–Ω={type(retrieved_type)}")
        print(f"   –†–∞–≤–Ω—ã: {field_type == retrieved_type}")
        print(f"   –ü–æ–ª–Ω—ã–µ values: {item_values}")
        print()
    
    root.destroy()
    
    print("‚úÖ –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã")

if __name__ == "__main__":
    test_combobox_issue()
    input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")