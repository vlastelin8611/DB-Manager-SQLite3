#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–µ–∑ GUI
"""

import sqlite3
import tempfile
import os

def test_sql_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é SQL —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SQL...")
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–∏–∞–ª–æ–≥–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
    test_cases = [
        {
            'name': 'users',
            'fields': [
                ('id', 'INTEGER', 'NO', '', 'YES'),
                ('name', 'TEXT', 'NO', '', 'NO'), 
                ('email', 'TEXT', 'YES', 'NULL', 'NO'),
                ('age', 'INTEGER', 'YES', '18', 'NO')
            ]
        },
        {
            'name': 'products',
            'fields': [
                ('category_id', 'INTEGER', 'NO', '', 'YES'),
                ('product_id', 'INTEGER', 'NO', '', 'YES'),
                ('name', 'TEXT', 'NO', '', 'NO'),
                ('price', 'REAL', 'NO', '0.0', 'NO')
            ]
        }
    ]
    
    for case in test_cases:
        table_name = case['name']
        fields_data = case['fields']
        
        print(f"\n   –¢–∞–±–ª–∏—Ü–∞ '{table_name}':")
        
        fields = []
        primary_keys = []
        
        for field_name, field_type, allow_null, default, is_pk in fields_data:
            field_def = f'"{field_name}" {field_type.upper()}'
            
            if is_pk == 'YES':
                primary_keys.append(field_name)
                if field_type.upper() == 'INTEGER' and len([pk for fn, ft, an, d, pk in fields_data if pk == 'YES']) == 1:
                    field_def += " PRIMARY KEY AUTOINCREMENT"
                else:
                    field_def += " PRIMARY KEY"
            
            if allow_null == 'NO' and is_pk != 'YES':
                field_def += " NOT NULL"
                
            if default and default.strip() and default.strip().upper() != 'NULL':
                if field_type.upper() in ['TEXT', 'BLOB']:
                    field_def += f" DEFAULT '{default.strip()}'"
                else:
                    field_def += f" DEFAULT {default.strip()}"
                    
            fields.append(field_def)
        
        # –°–æ—Å—Ç–∞–≤–Ω–æ–π –ø–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á
        if len(primary_keys) > 1:
            pk_fields = [f'"{pk}"' for pk in primary_keys]
            pk_constraint = f'PRIMARY KEY ({", ".join(pk_fields)})'
            fields.append(pk_constraint)
            
        sql = f'CREATE TABLE "{table_name}" ({", ".join(fields)})'
        print(f"   SQL: {sql}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
        try:
            conn = sqlite3.connect(':memory:')
            cursor = conn.cursor()
            cursor.execute(sql)
            print("   ‚úÖ SQL –≤–∞–ª–∏–¥–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            cursor.execute(f'PRAGMA table_info("{table_name}")')
            columns = cursor.fetchall()
            print(f"   üìä –ö–æ–ª–æ–Ω–æ–∫ —Å–æ–∑–¥–∞–Ω–æ: {len(columns)}")
            
            for col in columns:
                cid, name, col_type, notnull, default, pk = col
                print(f"      {name}: {col_type} (NULL: {'NO' if notnull else 'YES'}, PK: {'YES' if pk else 'NO'})")
            
            conn.close()
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ SQL: {str(e)}")

def test_data_operations():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏"""
    print("\nüíæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏...")
    
    temp_db = tempfile.mktemp(suffix='.db')
    
    try:
        conn = sqlite3.connect(temp_db)
        cursor = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
        cursor.execute('''
        CREATE TABLE "test_table" (
            "id" INTEGER PRIMARY KEY AUTOINCREMENT,
            "name" TEXT NOT NULL,
            "age" INTEGER DEFAULT 18,
            "email" TEXT
        )
        ''')
        
        print("   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞")
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
        test_data = [
            ('–ê–ª–µ–∫—Å–µ–π –ò–≤–∞–Ω–æ–≤', 25, 'alex@example.com'),
            ('–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞', None, 'maria@example.com'),
            ('John Smith', 30, None),
            ('–¢–µ—Å—Ç –¢–µ—Å—Ç–æ–≤', 18, 'test@test.ru')
        ]
        
        cursor.executemany(
            'INSERT INTO test_table (name, age, email) VALUES (?, ?, ?)', 
            test_data
        )
        conn.commit()
        
        print(f"   ‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ {len(test_data)} –∑–∞–ø–∏—Å–µ–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
        cursor.execute('SELECT * FROM test_table')
        results = cursor.fetchall()
        
        print(f"   üìä –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(results)}")
        
        for row in results:
            print(f"      ID: {row[0]}, Name: {row[1]}, Age: {row[2]}, Email: {row[3]}")
            
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
        cursor.execute("SELECT * FROM test_table WHERE name LIKE '%–¢–µ—Å—Ç%'")
        search_results = cursor.fetchall()
        print(f"   üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ –ø–æ–∏—Å–∫—É '–¢–µ—Å—Ç': {len(search_results)} –∑–∞–ø–∏—Å–µ–π")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º NULL –∑–Ω–∞—á–µ–Ω–∏—è
        cursor.execute("SELECT COUNT(*) FROM test_table WHERE age IS NULL")
        null_count = cursor.fetchone()[0]
        print(f"   ‚ö™ –ó–∞–ø–∏—Å–µ–π —Å NULL –≤ age: {null_count}")
        
        conn.close()
        print("   ‚úÖ –¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏: {str(e)}")
    finally:
        try:
            os.remove(temp_db)
        except:
            pass

def test_backup_functionality():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±—ç–∫–∞–ø–æ–≤"""
    print("\nüíº –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—ç–∫–∞–ø–æ–≤...")
    
    import shutil
    temp_dir = tempfile.mkdtemp()
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –ë–î
        source_db = os.path.join(temp_dir, 'source.db')
        conn = sqlite3.connect(source_db)
        cursor = conn.cursor()
        
        cursor.execute('CREATE TABLE backup_test (id INTEGER, data TEXT)')
        cursor.execute("INSERT INTO backup_test VALUES (1, 'test data')")
        conn.commit()
        conn.close()
        
        print("   ‚úÖ –ò—Å—Ö–æ–¥–Ω–∞—è –ë–î —Å–æ–∑–¥–∞–Ω–∞")
        
        # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
        backup_db = os.path.join(temp_dir, 'backup.db')
        shutil.copy2(source_db, backup_db)
        
        if os.path.exists(backup_db):
            print("   ‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—ç–∫–∞–ø–∞
            conn = sqlite3.connect(backup_db)
            cursor = conn.cursor()
            cursor.execute('SELECT * FROM backup_test')
            result = cursor.fetchone()
            
            if result and result[0] == 1 and result[1] == 'test data':
                print("   ‚úÖ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—ç–∫–∞–ø–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print("   ‚ùå –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—ç–∫–∞–ø–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                
            conn.close()
        else:
            print("   ‚ùå –ë—ç–∫–∞–ø –Ω–µ —Å–æ–∑–¥–∞–Ω")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –±—ç–∫–∞–ø–∞: {str(e)}")
    finally:
        shutil.rmtree(temp_dir, ignore_errors=True)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("=" * 60)
    print("üöÄ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò")
    print("=" * 60)
    
    test_sql_generation()
    test_data_operations() 
    test_backup_functionality()
    
    print("\n" + "=" * 60)
    print("‚úÖ –í–°–ï –ë–´–°–¢–†–´–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´")
    print("=" * 60)
    
    return 0

if __name__ == "__main__":
    try:
        exit_code = main()
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
    except Exception as e:
        print(f"\nüí• –û–®–ò–ë–ö–ê: {str(e)}")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")