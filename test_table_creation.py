#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã - —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –ø—Ä–æ—Ü–µ—Å—Å–∞
"""

import sys
import os
import sqlite3
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from db_manager import DatabaseManager
import tempfile

def test_table_creation_trace():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º"""
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ë–î
    temp_db = tempfile.mktemp(suffix='.db')
    print(f"üóÑÔ∏è –°–æ–∑–¥–∞–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ë–î: {temp_db}")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        conn = sqlite3.connect(temp_db)
        cursor = conn.cursor()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º SQL –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–∞–∫ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ
        print("\n1Ô∏è‚É£ –¢–µ—Å—Ç SQL –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª–µ–π –∫–∞–∫ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ
        fields_data = [
            {'name': 'id', 'type': 'INTEGER', 'primary_key': True, 'auto_increment': True, 'not_null': False},
            {'name': 'username', 'type': 'TEXT', 'primary_key': False, 'auto_increment': False, 'not_null': True},
            {'name': 'email', 'type': 'TEXT', 'primary_key': False, 'auto_increment': False, 'not_null': False},
            {'name': 'age', 'type': 'INTEGER', 'primary_key': False, 'auto_increment': False, 'not_null': False}
        ]
        
        table_name = "users_test"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SQL –∫–∞–∫ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
        sql_parts = []
        sql_parts.append(f'CREATE TABLE "{table_name}" (')
        
        field_definitions = []
        for field in fields_data:
            field_def = f'"{field["name"]}" {field["type"]}'
            
            if field.get('primary_key') and field.get('auto_increment'):
                field_def += ' PRIMARY KEY AUTOINCREMENT'
            elif field.get('primary_key'):
                field_def += ' PRIMARY KEY'
                
            if field.get('not_null') and not field.get('primary_key'):
                field_def += ' NOT NULL'
                
            field_definitions.append(field_def)
        
        sql_parts.append('    ' + ',\n    '.join(field_definitions))
        sql_parts.append(')')
        
        sql = '\n'.join(sql_parts)
        
        print(f"üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SQL:")
        print(sql)
        print()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º SQL
        cursor.execute(sql)
        conn.commit()
        print("‚úÖ SQL –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cursor.execute(f'PRAGMA table_info("{table_name}")')
        columns = cursor.fetchall()
        
        print(f"\nüìä –†–µ–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã:")
        for col in columns:
            cid, name, col_type, notnull, default, pk = col
            print(f"   '{name}': {col_type} | NOT NULL: {bool(notnull)} | PK: {bool(pk)}")
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –æ–∂–∏–¥–∞–µ–º—ã–º
            expected_field = next((f for f in fields_data if f['name'] == name), None)
            if expected_field:
                expected_type = expected_field['type']
                if col_type != expected_type:
                    print(f"   ‚ùå –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï: –æ–∂–∏–¥–∞–ª—Å—è {expected_type}, –ø–æ–ª—É—á–µ–Ω {col_type}")
                else:
                    print(f"   ‚úÖ –¢–∏–ø –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
        
        # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å —Ç–∏–ø–∞–º–∏ –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ
        print(f"\n2Ô∏è‚É£ –¢–µ—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Combobox –ø—Ä–æ–≥—Ä–∞–º–º—ã:")
        
        # –í–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        type_values = ['INTEGER', 'TEXT', 'REAL', 'BLOB', 'NUMERIC']
        
        for i, type_name in enumerate(type_values):
            field_name = f"test_{type_name.lower()}_field"
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
            test_table = f"type_test_{i}"
            test_sql = f'CREATE TABLE "{test_table}" ("id" INTEGER PRIMARY KEY, "{field_name}" {type_name})'
            
            print(f"   –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–∏–ø {type_name}:")
            print(f"   SQL: {test_sql}")
            
            cursor.execute(test_sql)
            conn.commit()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º
            cursor.execute(f'PRAGMA table_info("{test_table}")')
            test_columns = cursor.fetchall()
            
            for col in test_columns:
                cid, name, col_type, notnull, default, pk = col
                if name == field_name:
                    if col_type == type_name:
                        print(f"   ‚úÖ {type_name}: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ {col_type}")
                    else:
                        print(f"   ‚ùå {type_name}: –æ–∂–∏–¥–∞–ª—Å—è, –ø–æ–ª—É—á–µ–Ω {col_type}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {str(e)}")
        import traceback
        traceback.print_exc()
        return False
        
    finally:
        try:
            conn.close()
            os.remove(temp_db)
        except:
            pass

def test_combobox_values():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ Combobox"""
    
    print(f"\n3Ô∏è‚É£ –¢–µ—Å—Ç –∑–Ω–∞—á–µ–Ω–∏–π Combobox:")
    
    # –ó–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã (dialogs.py)
    type_values = ['INTEGER', 'TEXT', 'REAL', 'BLOB', 'NUMERIC']
    
    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ:")
    for i, val in enumerate(type_values):
        print(f"   {i}: '{val}' (—Ç–∏–ø: {type(val)})")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print(f"\n–°–∏–º—É–ª—è—Ü–∏—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    for val in type_values:
        selected = val  # –ö–∞–∫ –±—É–¥—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª
        print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª: '{selected}'")
        print(f"   –¢–∏–ø Python: {type(selected)}")
        print(f"   –î–ª–∏–Ω–∞: {len(selected)}")
        print(f"   repr(): {repr(selected)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –≤ SQL
        sql_fragment = f'"test_field" {selected}'
        print(f"   –í SQL: {sql_fragment}")
        print()

if __name__ == "__main__":
    print("=" * 70)
    print("üî¨ –î–ï–¢–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø –¢–ê–ë–õ–ò–¶")
    print("=" * 70)
    
    try:
        success1 = test_table_creation_trace()
        test_combobox_values()
        
        print("\n" + "=" * 70)
        if success1:
            print("‚úÖ –¢–µ—Å—Ç—ã SQL –∏ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
            print("üí≠ –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –≤—Å–µ –µ—â–µ –µ—Å—Ç—å, –æ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤:")
            print("   1. –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã (–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ)")
            print("   2. –û–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏–π tkinter")
            print("   3. –ü–µ—Ä–µ–¥–∞—á–µ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –¥–∏–∞–ª–æ–≥–∞–º–∏")
            print("   4. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≥–¥–µ-—Ç–æ –≤ –∫–æ–¥–µ")
        else:
            print("‚ùå –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ SQL –∏–ª–∏ —Ç–∏–ø–∞—Ö")
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        import traceback
        traceback.print_exc()
    
    print("=" * 70)
    input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")