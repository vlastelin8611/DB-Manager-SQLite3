#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥–ª—è SQLite Database Manager
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –∫ –∑–∞–ø—É—Å–∫—É
"""

import sys
import os
import platform
from datetime import datetime

def print_header():
    """–ü–µ—á–∞—Ç–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("=" * 70)
    print("üîç –ü–†–û–í–ï–†–ö–ê –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò SQLite Database Manager")
    print("=" * 70)
    print(f"–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: {platform.system()} {platform.release()}")
    print("-" * 70)

def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ—Ä—Å–∏—é Python"""
    print("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python...")
    
    version = sys.version_info
    version_str = f"{version.major}.{version.minor}.{version.micro}"
    
    if version >= (3, 5):
        print(f"   ‚úÖ Python {version_str} - —Å–æ–≤–º–µ—Å—Ç–∏–º")
        return True
    else:
        print(f"   ‚ùå Python {version_str} - –ù–ï —Å–æ–≤–º–µ—Å—Ç–∏–º (—Ç—Ä–µ–±—É–µ—Ç—Å—è 3.5+)")
        return False

def check_tkinter():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å tkinter"""
    print("\nüñºÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ tkinter...")
    
    try:
        import tkinter as tk
        
        # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫–Ω–æ
        root = tk.Tk()
        root.withdraw()  # –°–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        ttk_available = False
        try:
            from tkinter import ttk
            ttk_available = True
        except ImportError:
            pass
        
        root.destroy()
        
        print("   ‚úÖ tkinter –¥–æ—Å—Ç—É–ø–µ–Ω")
        if ttk_available:
            print("   ‚úÖ tkinter.ttk –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print("   ‚ö†Ô∏è  tkinter.ttk –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –±–∞–∑–æ–≤—ã–µ –≤–∏–¥–∂–µ—Ç—ã)")
            
        return True
        
    except ImportError:
        print("   ‚ùå tkinter –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        print("   üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt-get install python3-tk")
        return False
    except Exception as e:
        print(f"   ‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º–∞ —Å tkinter: {str(e)}")
        return False

def check_sqlite3():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å sqlite3"""
    print("\nüíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite...")
    
    try:
        import sqlite3
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é SQLite
        sqlite_version = sqlite3.sqlite_version
        python_sqlite_version = sqlite3.version
        
        print(f"   ‚úÖ sqlite3 –¥–æ—Å—Ç—É–ø–µ–Ω (Python API: {python_sqlite_version})")
        print(f"   ‚úÖ SQLite –≤–µ—Ä—Å–∏—è: {sqlite_version}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ë–î –≤ –ø–∞–º—è—Ç–∏
        conn = sqlite3.connect(':memory:')
        cursor = conn.cursor()
        cursor.execute('CREATE TABLE test (id INTEGER)')
        cursor.execute('INSERT INTO test VALUES (1)')
        cursor.execute('SELECT * FROM test')
        result = cursor.fetchone()
        conn.close()
        
        if result == (1,):
            print("   ‚úÖ SQLite —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            print("   ‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º SQLite")
            return False
            
    except ImportError:
        print("   ‚ùå sqlite3 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return False
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ SQLite: {str(e)}")
        return False

def check_standard_modules():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–æ–¥—É–ª–∏ Python"""
    print("\nüìö –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –º–æ–¥—É–ª–µ–π...")
    
    modules = {
        'os': '—Ä–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π',
        'shutil': '–æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ñ–∞–π–ª–∞–º–∏',
        'datetime': '—Ä–∞–±–æ—Ç–∞ —Å –¥–∞—Ç–∞–º–∏',
        'threading': '–º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å',
        'json': '—Ä–∞–±–æ—Ç–∞ —Å JSON'
    }
    
    all_available = True
    
    for module, description in modules.items():
        try:
            __import__(module)
            print(f"   ‚úÖ {module} - {description}")
        except ImportError:
            print(f"   ‚ùå {module} - {description} [–ù–ï–î–û–°–¢–£–ü–ï–ù]")
            all_available = False
    
    return all_available

def check_file_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞...")
    
    script_dir = os.path.dirname(os.path.abspath(__file__))
    
    required_files = {
        'db_manager.py': '–æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
        'dialogs.py': '–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏'
    }
    
    optional_files = {
        'README.md': '–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è',
        'EXAMPLES.md': '–ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è',
        'run.py': '—Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞'
    }
    
    all_required = True
    
    print("   –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã:")
    for filename, description in required_files.items():
        filepath = os.path.join(script_dir, filename)
        if os.path.exists(filepath):
            size = os.path.getsize(filepath)
            print(f"   ‚úÖ {filename} - {description} ({size} –±–∞–π—Ç)")
        else:
            print(f"   ‚ùå {filename} - {description} [–ù–ï –ù–ê–ô–î–ï–ù]")
            all_required = False
    
    print("   –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã:")
    for filename, description in optional_files.items():
        filepath = os.path.join(script_dir, filename)
        if os.path.exists(filepath):
            size = os.path.getsize(filepath)
            print(f"   ‚úÖ {filename} - {description} ({size} –±–∞–π—Ç)")
        else:
            print(f"   ‚ö†Ô∏è  {filename} - {description} [–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç]")
    
    return all_required

def check_permissions():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞"""
    print("\nüîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞...")
    
    script_dir = os.path.dirname(os.path.abspath(__file__))
    home_dir = os.path.expanduser("~")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ —á—Ç–µ–Ω–∏–µ –≤ –ø–∞–ø–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
    if os.access(script_dir, os.R_OK):
        print("   ‚úÖ –ü—Ä–∞–≤–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
    else:
        print("   ‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –¥–æ–º–∞—à–Ω–µ–π –ø–∞–ø–∫–µ
    if os.access(home_dir, os.W_OK):
        print("   ‚úÖ –ü—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –¥–æ–º–∞—à–Ω–µ–π –ø–∞–ø–∫–µ")
    else:
        print("   ‚ö†Ô∏è  –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –¥–æ–º–∞—à–Ω–µ–π –ø–∞–ø–∫–µ")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ –±—ç–∫–∞–ø–æ–≤
    backup_dir = os.path.join(home_dir, "db_backups")
    try:
        if not os.path.exists(backup_dir):
            os.makedirs(backup_dir)
            print("   ‚úÖ –ü–∞–ø–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π —Å–æ–∑–¥–∞–Ω–∞")
        else:
            print("   ‚úÖ –ü–∞–ø–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        if os.access(backup_dir, os.W_OK):
            print("   ‚úÖ –ü—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –ø–∞–ø–∫—É –±—ç–∫–∞–ø–æ–≤")
        else:
            print("   ‚ö†Ô∏è  –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –ø–∞–ø–∫—É –±—ç–∫–∞–ø–æ–≤")
            
    except Exception as e:
        print(f"   ‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–∞–ø–∫–æ–π –±—ç–∫–∞–ø–æ–≤: {str(e)}")
    
    return True

def check_display():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è GUI"""
    print("\nüñ•Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é DISPLAY (–¥–ª—è X11)
    display = os.environ.get('DISPLAY')
    if display:
        print(f"   ‚úÖ DISPLAY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {display}")
    else:
        print("   ‚ö†Ô∏è  DISPLAY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º–æ–π –¥–ª—è SSH)")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∞–Ω—Å —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞
    desktop = os.environ.get('XDG_CURRENT_DESKTOP')
    if desktop:
        print(f"   ‚úÖ –†–∞–±–æ—á–∏–π —Å—Ç–æ–ª: {desktop}")
    else:
        print("   ‚ö†Ô∏è  –†–∞–±–æ—á–∏–π —Å—Ç–æ–ª –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
    
    return True

def test_gui_creation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ GUI"""
    print("\nüé® –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
    
    try:
        import tkinter as tk
        from tkinter import ttk
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫–Ω–æ
        root = tk.Tk()
        root.title("–¢–µ—Å—Ç GUI")
        root.geometry("300x200")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç—ã
        label = ttk.Label(root, text="–¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω!")
        label.pack(pady=20)
        
        button = ttk.Button(root, text="OK", command=root.destroy)
        button.pack(pady=10)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ –Ω–∞ 2 —Å–µ–∫—É–Ω–¥—ã
        root.after(2000, root.destroy)
        
        print("   ‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –æ–∫–Ω–æ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ –Ω–∞ 2 —Å–µ–∫—É–Ω–¥—ã...")
        root.mainloop()
        
        print("   ‚úÖ –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è GUI: {str(e)}")
        return False

def provide_recommendations(results):
    """–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("\n" + "=" * 70)
    print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
    print("=" * 70)
    
    all_passed = all(results.values())
    
    if all_passed:
        print("üéâ –û–¢–õ–ò–ß–ù–û! –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ.")
        print("\n‚úÖ SQLite Database Manager –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("\nüöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        print("   python3 db_manager.py")
        print("   –∏–ª–∏")
        print("   python3 run.py")
        
    else:
        print("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è:")
        
        if not results['python']:
            print("\n‚ùå –ö–†–ò–¢–ò–ß–ù–û: –û–±–Ω–æ–≤–∏—Ç–µ Python –¥–æ –≤–µ—Ä—Å–∏–∏ 3.5 –∏–ª–∏ –Ω–æ–≤–µ–µ")
            
        if not results['tkinter']:
            print("\n‚ùå –ö–†–ò–¢–ò–ß–ù–û: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ tkinter:")
            print("   sudo apt-get install python3-tk")
            
        if not results['sqlite']:
            print("\n‚ùå –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–±–ª–µ–º–∞ —Å SQLite")
            
        if not results['files']:
            print("\n‚ùå –ö–†–ò–¢–ò–ß–ù–û: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã")
            
        if not results['modules']:
            print("\n‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–æ–¥—É–ª–∏")
            
        print(f"\nüìä –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–æ–∫:")
        for check, status in results.items():
            icon = "‚úÖ" if status else "‚ùå"
            print(f"   {icon} {check}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print_header()
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    results = {
        'python': check_python_version(),
        'tkinter': check_tkinter(),
        'sqlite': check_sqlite3(),
        'modules': check_standard_modules(),
        'files': check_file_structure(),
        'permissions': check_permissions(),
        'display': check_display()
    }
    
    # –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç, —Ç–µ—Å—Ç–∏—Ä—É–µ–º GUI
    if results['python'] and results['tkinter']:
        results['gui_test'] = test_gui_creation()
    else:
        results['gui_test'] = False
        print("\nüö´ –¢–µ—Å—Ç GUI –ø—Ä–æ–ø—É—â–µ–Ω –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    
    # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    provide_recommendations(results)
    
    return 0 if all(results.values()) else 1

if __name__ == "__main__":
    try:
        exit_code = main()
        print(f"\n{'='*70}")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\n\nüëã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)